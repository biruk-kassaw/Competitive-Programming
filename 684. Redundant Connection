class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        self.parent = [-1]*(len(edges)+1)   # -1 is giving me 98% time 
		# self.parent = [0]*(len(edges)+1)   # 0 is giving me 40% time 	
        
        def find(x):
            while self.parent[x] > 0:
                x = self.parent[x]
            return x     
        
        def union(x,y):
            root_x = find(x)
            root_y = find(y)
        
            if root_x == root_y:
                return False
            else:
                self.parent[root_x] = root_y
                return True
            
        for u,v in edges:
            if not union(u,v):
                return [u,v]
