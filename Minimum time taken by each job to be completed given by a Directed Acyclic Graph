from typing import List

from collections import *
from typing import List


class Solution:
    def minimumTime(self, n : int,m : int, edges : List[List[int]]) -> int:
        # code here
        graph = defaultdict(list)
        incomings = [0]*(n+1)
        
        for a, b in edges:
            graph[a].append(b)
            incomings[b] += 1
        
        q = deque()
        for i in range(1, n+1):
            if incomings[i] == 0:
                q.append(i)
        
        step = 1
        time = [0] * (n+1)
        
        while q:
            for _ in range(len(q)):
                cur = q.popleft()
                time[cur] = step
                for child in graph[cur]:
                    incomings[child] -= 1
                    if incomings[child] == 0:
                        q.append(child)
            step += 1
        time.pop(0)
        time = [str(i) for i in time]
        return " ".join(time)

#{ 
 # Driver Code Starts
class IntArray:
    def __init__(self) -> None:
        pass
    def Input(self,n):
        arr=[int(i) for i in input().strip().split()]#array input
        return arr
    def Print(self,arr):
        for i in arr:
            print(i,end=" ")
        print()



class IntMatrix:
    def __init__(self) -> None:
        pass
    def Input(self,n,m):
        matrix=[]
        #matrix input
        for _ in range(n):
            matrix.append([int(i) for i in input().strip().split()])
        return matrix
    def Print(self,arr):
        for i in arr:
            for j in i:
                print(j,end=" ")
            print()


if __name__=="__main__":
    t = int(input())
    for _ in range(t):
        
        a=IntArray().Input(2)
        
        
        edges=IntMatrix().Input(a[1], a[1])
        
        obj = Solution()
        res = obj.minimumTime(a[0],a[1], edges)
        
        print(res)
        

# } Driver Code Ends
